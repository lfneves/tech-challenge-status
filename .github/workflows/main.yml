name: Tech challenge status-ws

on:
#  workflow_dispatch:
   push:
     branches:
       - main
   pull_request:
     branches:
       - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: status-ws
  SHORT_SHA: ${{ github.sha }}
  IMAGE_NAME: lfneves
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: delivery-cluster
  STATUS_QUEUE: ${{github.repository.STATUS_QUEUE}}
  TOPIC_ORDER_SNS: ${{github.repository.TOPIC_ORDER_SNS}}
  PAYMENT_QUEUE: ${{github.repository.PAYMENT_QUEUE}}

jobs:
  build:
    name: Build project artifact
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build with Gradle
        run: ./gradlew bootJar
        working-directory: ${{ github.workspace }}

      - name: Copy Jar file
        run: mv build/libs/*.jar app.jar

      - name: Upload Jar file
        uses: actions/upload-artifact@v2
        with:
          name: jar-file
          path: app.jar

  sonarCloud:
    name: Sonar Analyze
    needs: [build]
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: mongodb
          MONGO_INITDB_ROOT_PASSWORD: mongodb
          MONGO_INITDB_DATABASE: statusdb
          options: >-
            --health-cmd mongo
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
        ports:
          - 27017:27017
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --info

  test:
    name: Project auto test
    needs: [ build, sonarcloud ]
    runs-on: ubuntu-latest
    env:
      TOPIC_ORDER_SNS: ${{secrets.TOPIC_ORDER_SNS}}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Run tests
        env:
          TOPIC_ORDER_SNS: ${{env.TOPIC_ORDER_SNS}}
        run: ./gradlew clean test

  ecr:
    needs: [test]
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Download jar file
        uses: actions/download-artifact@v2
        with:
          name: jar-file
          path: build/libs/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest .
        working-directory: ${{ github.workspace }}

      - name: Tag image to Amazon ECR
        id: tag-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest ${{ env.ECR_REGISTRY }}/status-ws:latest
        working-directory: ${{ github.workspace }}

      - name: Push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
        working-directory: ${{ github.workspace }}

  deploy-to-ecs:
    name: Deploy to AWS ECS
    needs: ecr
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster delivery-cluster --service status-ws --force-new-deployment

